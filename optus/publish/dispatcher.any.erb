# Each farm configures a set of load balanced renders (i.e. remote servers)
/farms
  {
  /farm_flush_oca
    {
    /virtualhosts
      {
        "flush.optus.com.au"
      }
    /renders
      {
      /rend01
        {
        # Hostname or IP of the render
        /hostname "<%= @aem_dispatch_proxy_to %>"
        # Port of the render
        /port "5434"
        # Connect timeout in milliseconds, 0 to wait indefinitely
        # /timeout "0"
        # HTTPS
        /secure "1"
        }
      }
    /cache
      {
       /docroot "<%= @aem_path %>/dispatcher/cache/oca"
       /statfileslevel "2"
      }
    }

  /farm_flush_optusmr
    {
    /virtualhosts
      {
        "flush.retail.optus.com.au"
      }
    /renders
      {
      /rend01
        {
        # Hostname or IP of the render
        /hostname "<%= @aem_dispatch_proxy_to %>"
        # Port of the render
        /port "5434"
        # Connect timeout in milliseconds, 0 to wait indefinitely
        # /timeout "0"
        # HTTPS
        /secure "1"
        }
      }
    /cache
      {
       /docroot "<%= @aem_path %>/dispatcher/cache/optusmr"
       /statfileslevel "2"
      }
    }

  /optus
    {  
    # Request headers that should be forwarded to the remote server.
    /clientheaders
      {
      # Forward all request headers that are end-to-end. If you want
      # to forward a specific set of headers, you'll have to list
      # them here.
      "*"
      }
      
    # Hostname globbing for farm selection (virtual domain addressing)
    /virtualhosts
      {
      # Entries will be compared against the "Host" request header
      # and an optional request URL prefix.
      #
      # Examples:
      #
      #   www.company.com
      #   intranet.*
      #   myhost:8888/mysite
			<% @OPTUS_VIRTUAL_HOST.each do |host| %>
			"<%= host %>"<% end %>
      }
      
    # The load will be balanced among these render instances
    /renders
      {
      /rend01
        {
        # Hostname or IP of the render
        /hostname "<%= @aem_dispatch_proxy_to %>"
        # Port of the render
        /port "5434"
        # Connect timeout in milliseconds, 0 to wait indefinitely
        # /timeout "0"
        # HTTPS
        /secure "1"
        }
      }
      
    # The filter section defines the requests that should be handled by the dispatcher.
    #
    # Entries can be either specified using globs, or elements of the request line:
    #
    # (1) globs will be compared against the entire request line, e.g.:
    #
    #     /0001 { /type "deny" /glob "* /index.html *" }
    #
    #   matches request "GET /index.html HTTP/1.1" but not "GET /index.html?a=b HTTP/1.1".
    #
    # (2) method/url/query/protocol will be compared againts the respective elements of
    #   the request line, e.g.:
    #
    #     /0001 { /type "deny" /method "GET" /url "/index.html" }
    #
    #   matches both "GET /index.html" and "GET /index.html?a=b HTTP/1.1".
    #
    # Note: specifying elements of the request line is the preferred method.
    /filter
      {
      # Deny everything first and then allow specific entries
      /0001 { /type "deny" /glob "*" }
      
      # Open consoles
#     /0011 { /type "allow" /url "/admin/*"  }  # allow servlet engine admin
#     /0012 { /type "allow" /url "/crx/*"    }  # allow content repository
#     /0013 { /type "allow" /url "/system/*" }  # allow OSGi console
        
      # Allow non-public content directories
#     /0021 { /type "allow" /url "/apps/*"   }  # allow apps access

      /0023 { /type "allow" /url "/content*" }  # disable this rule to allow mapped content only
	  /0024 { /type "allow" /url "/etc/designs/default/*" }
      
#     /0024 { /type "allow" /url "/libs/*"   }
#     /0025 { /type "deny"  /url "/libs/shindig/proxy*" } # if you enable /libs close access to proxy

#     /0026 { /type "allow" /url "/home/*"   }
#     /0027 { /type "allow" /url "/tmp/*"    }
#     /0028 { /type "allow" /url "/var/*"    }

      # Allowing OSG to be accessible by anyone
      /0030 { /type "allow" /url "/etc/designs/springd/clientlibs/osg/*"    } # enable OSG

	  # Allowing UXF to be accessible by anyone
	  /0031 { /type "allow" /url "/etc/designs/springd/clientlibs/uxf/*"    } # enable UXF

	  # Allowing Static font accessible by anyone
      /0032 { /type "allow" /url "/etc/designs/springd/clientlibs/osg-static/*"    } # enable OSG static


      # Enable specific mime types in non-public content directories 
      /0041 { /type "allow" /url "*.css"   }  # enable css
      /0042 { /type "allow" /url "*.gif"   }  # enable gifs
      /0043 { /type "allow" /url "*.ico"   }  # enable icos
      /0044 { /type "allow" /url "*.js"    }  # enable javascript
      /0045 { /type "allow" /url "*.png"   }  # enable png
      /0046 { /type "allow" /url "*.swf"   }  # enable flash
      /0047 { /type "allow" /url "*.jpg"   }  # enable jpg
      /0048 { /type "allow" /url "*.jpeg"  }  # enable jpeg
	  /0049 { /type "allow" /url "*.svg"  }  # enable svg
	  /0050 { /type "allow" /url "*.ttf"  }  # enable ttf
	  /0051 { /type "allow" /url "*.eot"  }  # enable eot
	  /0052 { /type "allow" /url "*.woff"  }  # enable woff
	  /0053 { /type "allow" /url "*.woff2"  }  # enable woff2

      # Enable features 
      /0062 { /type "allow" /url "/libs/cq/personalization/*"  }  # enable personalization

	  # Allow only CSRF request
      /0063 { /type "allow" /url "/libs/granite/csrf/token.json" }
      /0064 { /type "allow" /url "/libs/cq/security/userinfo.json" }
      /0065 { /type "allow" /url "/libs/cq/i18n/dict.en.json" }

      # Deny content grabbing
      /0081 { /type "deny"  /url "*.tidy.json"     }
      /0082 { /type "deny"  /url "*.sysview.xml"   }
      /0083 { /type "deny"  /url "*.docview.json"  }
      /0084 { /type "deny"  /url "*.docview.xml"  }
      /0085 { /type "deny"  /url "*.*[0-9].json" }

      /0086 { /type "allow" /url "/bin/services/*"  }
      /0087 { /type "deny"  /url "*.infinity.json" }

#     /0088 { /type "allow" /method "GET" /url "*.1.json" }  # allow one-level json requests
      /0089 { /type "allow" /url "/content/awshealth.infinity.json" } #allow the healthcheck

      # Deny query
      /0090 { /type "deny"  /url "*.query.json" }
	  /0091 {/type "deny" /url  "/content/optus/en/includes/footer.html" }
	  /0092 {/type "deny" /url  "/content/optus/en/includes/header.html" }
	  /0093 {/type "deny" /url  "/content/optus/en/private/*" }
	  /0094 {/type "deny" /glob "*/content/optus/*.sitemap.xml" }
      /0095 {/type "deny" /glob "*/content/optus/*.sitemap-images.xml" }
      /0096 {/type "deny" /glob "*/content/optus/*.sitemap-videos.xml" }
	  /0097 {/type "allow" /glob "*/content/optus/en.sitemap.xml" }
      /0098 {/type "allow" /glob "*/content/optus/en.sitemap-images.xml" }
      /0099 {/type "allow" /glob "*/content/optus/en.sitemap-videos.xml" }

      #Allow uxf config json file to load
      /0100 { /type "allow" /url "/etc/designs/springd/clientlibs/uxf/*.json" }
      /0101 { /type "allow" /url "/etc/cloudsettings*" }
      /0102 { /type "allow" /url "/etc/segmentation*" }
      /0103 { /type "allow" /url "/etc/clientcontext*" }
      /0104 { /type "deny" /url "/bin/services/optus/removebundlingfiles"  }
      }

    # The cache section regulates what responses will be cached and where.
    /cache
      {
      # The docroot must be equal to the document root of the webserver. The
      # dispatcher will store files relative to this directory and subsequent
      # requests may be "declined" by the dispatcher, allowing the webserver
      # to deliver them just like static files.
      /docroot "<%= @aem_path %>/dispatcher/cache/oca"

      # Sets the level upto which files named ".stat" will be created in the 
      # document root of the webserver. When an activation request for some 
      # page is received, only files within the same subtree are affected 
      # by the invalidation.
      /statfileslevel "2"
      
      # Flag indicating whether to cache responses to requests that contain
      # authorization information.
      #/allowAuthorized "0"
      
      # Flag indicating whether the dispatcher should serve stale content if
      # no remote server is available.
      #/serveStaleOnError "0"
      
      # The rules section defines what responses should be cached based on
      # the requested URL. Please note that only the following requests can
      # lead to cacheable responses:
      #
      # - HTTP method is GET
      # - URL has an extension
      # - Request has no query string
      # - Request has no "Authorization" header (unless allowAuthorized is 1)
      /rules
        {
        /0000
          {
          # the globbing pattern to be compared against the url
          # example: *             -> everything
          #        : /foo/bar.*    -> only the /foo/bar documents
          #        : /foo/bar/*    -> all pages below /foo/bar
          #        : /foo/bar[./]* -> all pages below and /foo/bar itself
          #        : *.html        -> all .html files
          /glob "*"
          /type "allow"
          }
        /0001
          {
          /glob "/content/awshealth.infinity.json"
          /type "deny"
          }
        /0002
          {
          /glob "/etc/clientcontext/springd/content/jcr:content/stores.init.js"
          /type "deny"
          }
		/0003
          {
          /glob "/libs/granite/csrf/token.json"
          /type "deny"
          }
        }
        
      # The invalidate section defines the pages that are "invalidated" after
      # any activation. Please note that the activated page itself and all 
      # related documents are flushed on an modification. For example: if the 
      # page /foo/bar is activated, all /foo/bar.* files are removed from the
      # cache.
      /invalidate
        {
        /0000
          {
          /glob "*"
          /type "deny"
          }
        /0001
          {
          # Consider all HTML files stale after an activation.
          /glob "*.html"
          /type "allow"
          }
        /0002
          {
          /glob "/etc/segmentation.segment.js"
          /type "allow"
          }
          /0003
          {
          /glob "*/analytics.sitecatalyst.js"
          /type "allow"
          }
		  /0004
          {
          /glob "/etc/designs/springd/clientlibs/osg/*.js"
          /type "allow"
          }
		  /0005
          {
          /glob "/etc/designs/springd/clientlibs/osg/*.css"
          /type "allow"
          }
		  /0006
		  {
		  /glob "/etc/designs/springd/clientlibs/uxf/*.js"
		  /type "allow"
		  }
		  /0007
		  {
		  /glob "/etc/designs/springd/clientlibs/uxf/*.css"
		  /type "allow"
		  }
		  /0008
          {
          /glob "/etc/designs/springd/clientlibs/osg-static/*.css"
          /type "allow"
          }
          /0009
          {
          /glob "/etc/designs/springd/clientlibs/osg-static/*.js"
          /type "allow"
          }
          /0010
          {
          /glob "/etc/designs/springd/clientlibs/osg-static/*.woff"
          /type "allow"
          }
		  /0011
		  {
		  /glob "/bin/services/*"
		  /type "allow"
		  }
		  /0012
		  {
		  /glob "*.sitemap.xml"
		  /type "allow"
		  }
		  /0013
		  {
		  /glob "*.sitemap-images.xml"
		  /type "allow"
		  }
		  /0014
		  {
		  /glob "*.sitemap-videos.xml"
		  /type "allow"
		  }

        }

      # The allowedClients section restricts the client IP addresses that are
      # allowed to issue activation requests.
      /allowedClients
        {
        # Uncomment the following to restrict activation requests to originate
        # from "localhost" only.
        #
        /0000
          {
          /glob "*.*.*.*"
          /type "deny"
          }
        /0001
          {
          /glob "<%= @aem_dispatch_proxy_to %>"
          /type "allow"
          }
        }
        
      # The ignoreUrlParams section contains query string parameter names that
      # should be ignored when determining whether some request's output can be
      # cached or delivered from cache.
      #
      # Cache all pages
      /ignoreUrlParams
      {
        /0001 { /glob "*" /type "allow"  }
		/0002 { /glob "testDispCache" /type "deny"  }
	    /0003 { /glob "LUX_COMPRESS" /type "deny"  }
      }
      # Cache response headers next to a cached file. On the first request to
      # an uncached resource, all headers matching one of the values found here
      # are stored in a separate file, next to the cache file. On subsequent
      # requests to the cached resource, the stored headers are added to the
      # response.
      #
      # Note, that file globbing characters are not allowed here.
      #
      #/headers
      #  {
      #  "Cache-Control"
      #  "Content-Disposition"
      #  "Content-Type"
      #  "Expires"
      #  "Last-Modified"
      #  "X-Content-Type-Options"
      #  }

      # A grace period defines the number of seconds a stale, auto-invalidated
      # resource may still be served from the cache after the last activation
      # occurring. Auto-invalidated resources are invalidated by any activation,
      # when their path matches the /invalidate section above. This setting
      # can be used in a setup, where a batch of activations would otherwise
      # repeatedly invalidate the entire cache.
      #
      #/gracePeriod "2"

      # Enable TTL evaluates the response headers from the backend, and if they
      # contain a Cache-Control max-age or Expires date, an auxiliary, empty file
      # next to the cache file is created, with modification time equal to the
      # expiry date. When the cache file is requested past the modification time
      # it is automatically re-requested from the backend.
      #
      # /enableTTL "1"

      }

    /vanity_urls {
        /url "/libs/granite/dispatcher/content/vanityUrls.html"
        /file "<%= @aem_path %>/dispatcher/cache/vanity_urls"
        /delay 300
    }
      
    # The statistics sections dictates how the load should be balanced among the
    # renders according to the media-type. 
    /statistics
      {
      /categories
        {
        /html
          {
          /glob "*.html"
          }
        /others
          {
          /glob "*"
          }
        }
      }
    }

/optusmr
    {
    # Request headers that should be forwarded to the remote server.
    /clientheaders
      {
      # Forward all request headers that are end-to-end. If you want
      # to forward a specific set of headers, you'll have to list
      # them here.
      "*"
      }

    # Hostname globbing for farm selection (virtual domain addressing)
    /virtualhosts
      {
      # Entries will be compared against the "Host" request header
      # and an optional request URL prefix.
      #
      # Examples:
      #
      #   www.company.com
      #   intranet.*
      #   myhost:8888/mysite
			<% @RETAIL_VIRTUAL_HOST.each do |host| %>
			"<%= host %>"<% end %>
      }

    # The load will be balanced among these render instances
    /renders
      {
      /rend01
        {
        # Hostname or IP of the render
        /hostname "<%= @aem_dispatch_proxy_to %>"
        # Port of the render
        /port "5434"
        # Connect timeout in milliseconds, 0 to wait indefinitely
        # /timeout "0"
        # HTTPS
        /secure "1"
        }
      }

    # The filter section defines the requests that should be handled by the dispatcher.
    #
    # Entries can be either specified using globs, or elements of the request line:
    #
    # (1) globs will be compared against the entire request line, e.g.:
    #
    #     /0001 { /type "deny" /glob "* /index.html *" }
    #
    #   matches request "GET /index.html HTTP/1.1" but not "GET /index.html?a=b HTTP/1.1".
    #
    # (2) method/url/query/protocol will be compared againts the respective elements of
    #   the request line, e.g.:
    #
    #     /0001 { /type "deny" /method "GET" /url "/index.html" }
    #
    #   matches both "GET /index.html" and "GET /index.html?a=b HTTP/1.1".
    #
    # Note: specifying elements of the request line is the preferred method.
    /filter
      {
      # Deny everything first and then allow specific entries
      /0001 { /type "deny" /glob "*" }

      # Open consoles
#     /0011 { /type "allow" /url "/admin/*"  }  # allow servlet engine admin
#     /0012 { /type "allow" /url "/crx/*"    }  # allow content repository
#     /0013 { /type "allow" /url "/system/*" }  # allow OSGi console

      # Allow non-public content directories
#     /0021 { /type "allow" /url "/apps/*"   }  # allow apps access

      /0023 { /type "allow" /url "/content*" }  # disable this rule to allow mapped content only
	  /0024 { /type "allow" /url "/etc/designs/default/*" }

#     /0024 { /type "allow" /url "/libs/*"   }
#     /0025 { /type "deny"  /url "/libs/shindig/proxy*" } # if you enable /libs close access to proxy

#     /0026 { /type "allow" /url "/home/*"   }
#     /0027 { /type "allow" /url "/tmp/*"    }
#     /0028 { /type "allow" /url "/var/*"    }

      # Allowing OSG to be accessible by anyone
      /0030 { /type "allow" /url "/etc/designs/springd/clientlibs/osg-mr/*"    } # enable OSG

	  # Allowing UXF to be accessible by anyone
	  /0031 { /type "allow" /url "/etc/designs/springd/clientlibs/uxf/*"    } # enable UXF

      # Allowing UXF to be accessible by anyone
      /0032 { /type "allow" /url "/etc/designs/springd/clientlibs/mr-uxf/*"    } # enable MR-UXF

	  # Allowing Static font accessible by anyone
      /0033 { /type "allow" /url "/etc/designs/springd/clientlibs/osg-static-mr/*"    } # enable OSG static


      # Enable specific mime types in non-public content directories
      /0041 { /type "allow" /url "*.css"   }  # enable css
      /0042 { /type "allow" /url "*.gif"   }  # enable gifs
      /0043 { /type "allow" /url "*.ico"   }  # enable icos
      /0044 { /type "allow" /url "*.js"    }  # enable javascript
      /0045 { /type "allow" /url "*.png"   }  # enable png
      /0046 { /type "allow" /url "*.swf"   }  # enable flash
      /0047 { /type "allow" /url "*.jpg"   }  # enable jpg
      /0048 { /type "allow" /url "*.jpeg"  }  # enable jpeg
	  /0049 { /type "allow" /url "*.svg"  }  # enable svg
	  /0050 { /type "allow" /url "*.ttf"  }  # enable ttf
	  /0051 { /type "allow" /url "*.eot"  }  # enable eot
	  /0052 { /type "allow" /url "*.woff"  }  # enable woff
	  /0053 { /type "allow" /url "*.woff2"  }  # enable woff2

      # Enable features
      /0062 { /type "allow" /url "/libs/cq/personalization/*"  }  # enable personalization

	  # Allow only CSRF request
      /0063 { /type "allow" /url "/libs/granite/csrf/token.json" }
      /0064 { /type "allow" /url "/libs/cq/security/userinfo.json" }
      /0065 { /type "allow" /url "/libs/cq/i18n/dict.en.json" }

      # Deny content grabbing
      /0081 { /type "deny"  /url "*.tidy.json"     }
      /0082 { /type "deny"  /url "*.sysview.xml"   }
      /0083 { /type "deny"  /url "*.docview.json"  }
      /0084 { /type "deny"  /url "*.docview.xml"  }
      /0085 { /type "deny"  /url "*.*[0-9].json" }

      /0086 { /type "allow" /url "/bin/uno/services/*"  }
      /0087 { /type "deny"  /url "*.infinity.json" }

#     /0088 { /type "allow" /method "GET" /url "*.1.json" }  # allow one-level json requests
      /0089 { /type "allow" /url "/content/awshealth.infinity.json" } #allow the healthcheck

      # Deny query
      /0090 { /type "deny"  /url "*.query.json" }
	  /0091 {/type "deny" /url  "/content/optus-mr/en/includes/footer.html" }
	  /0092 {/type "deny" /url  "/content/optus-mr/en/includes/header.html" }
	  /0093 {/type "deny" /url  "/content/optus-mr/en/private/*" }
	  /0094 {/type "deny" /glob "*/content/optus-mr/*.sitemap.xml" }
      /0095 {/type "deny" /glob "*/content/optus-mr/*.sitemap-images.xml" }
      /0096 {/type "deny" /glob "*/content/optus-mr/*.sitemap-videos.xml" }
	  /0097 {/type "allow" /glob "*/content/optus-mr/en.sitemap.xml" }
      /0098 {/type "allow" /glob "*/content/optus-mr/en.sitemap-images.xml" }
      /0099 {/type "allow" /glob "*/content/optus-mr/en.sitemap-videos.xml" }

      #Allow uxf config json file to load
      /0100 { /type "allow" /url "/etc/designs/springd/clientlibs/uxf/*.json" }

      /0101 { /type "allow" /url "/etc/designs/springd/clientlibs/mr-uxf/*.json" }
      /0102 { /type "deny" /url "/bin/uno/services/optus/removebundlingfiles"  }
       }

    # The cache section regulates what responses will be cached and where.
    /cache
      {
      # The docroot must be equal to the document root of the webserver. The
      # dispatcher will store files relative to this directory and subsequent
      # requests may be "declined" by the dispatcher, allowing the webserver
      # to deliver them just like static files.
      /docroot "<%= @aem_path %>/dispatcher/cache/optusmr"

      # Sets the level upto which files named ".stat" will be created in the
      # document root of the webserver. When an activation request for some
      # page is received, only files within the same subtree are affected
      # by the invalidation.
      /statfileslevel "2"

      # Flag indicating whether to cache responses to requests that contain
      # authorization information.
      #/allowAuthorized "0"

      # Flag indicating whether the dispatcher should serve stale content if
      # no remote server is available.
      #/serveStaleOnError "0"

      # The rules section defines what responses should be cached based on
      # the requested URL. Please note that only the following requests can
      # lead to cacheable responses:
      #
      # - HTTP method is GET
      # - URL has an extension
      # - Request has no query string
      # - Request has no "Authorization" header (unless allowAuthorized is 1)
      /rules
        {
        /0000
          {
          # the globbing pattern to be compared against the url
          # example: *             -> everything
          #        : /foo/bar.*    -> only the /foo/bar documents
          #        : /foo/bar/*    -> all pages below /foo/bar
          #        : /foo/bar[./]* -> all pages below and /foo/bar itself
          #        : *.html        -> all .html files
          /glob "*"
          /type "allow"
          }
        /0001
          {
          /glob "/content/awshealth.infinity.json"
          /type "deny"
          }
		/0002
          {
          /glob "/libs/granite/csrf/token.json"
          /type "deny"
          }
        }

      # The invalidate section defines the pages that are "invalidated" after
      # any activation. Please note that the activated page itself and all
      # related documents are flushed on an modification. For example: if the
      # page /foo/bar is activated, all /foo/bar.* files are removed from the
      # cache.
      /invalidate
        {
        /0000
          {
          /glob "*"
          /type "deny"
          }
        /0001
          {
          # Consider all HTML files stale after an activation.
          /glob "*.html"
          /type "allow"
          }
        /0002
          {
          /glob "/etc/segmentation.segment.js"
          /type "allow"
          }
          /0003
          {
          /glob "*/analytics.sitecatalyst.js"
          /type "allow"
          }
		  /0004
          {
          /glob "/etc/designs/springd/clientlibs/osg-mr/*.js"
          /type "allow"
          }
		  /0005
          {
          /glob "/etc/designs/springd/clientlibs/osg-mr/*.css"
          /type "allow"
          }
		  /0006
		  {
		  /glob "/etc/designs/springd/clientlibs/uxf/*.js"
		  /type "allow"
		  }
		  /0007
		  {
		  /glob "/etc/designs/springd/clientlibs/mr-uxf/*.js"
		  /type "allow"
		  }
		  /0008
		  {
		  /glob "/etc/designs/springd/clientlibs/uxf/*.css"
		  /type "allow"
		  }
		  /0009
		  {
		  /glob "/etc/designs/springd/clientlibs/mr-uxf/*.css"
		  /type "allow"
		  }
		  /0010
          {
          /glob "/etc/designs/springd/clientlibs/osg-static-mr/*.css"
          /type "allow"
          }
          /0011
          {
          /glob "/etc/designs/springd/clientlibs/osg-static-mr/*.js"
          /type "allow"
          }
          /0012
          {
          /glob "/etc/designs/springd/clientlibs/osg-static-mr/*.woff"
          /type "allow"
          }
		  /0013
		  {
		  /glob "/bin/uno/services/*"
		  /type "allow"
		  }
		  /0014
		  {
		  /glob "*.sitemap.xml"
		  /type "allow"
		  }
		  /0015
		  {
		  /glob "*.sitemap-images.xml"
		  /type "allow"
		  }
		  /0016
		  {
		  /glob "*.sitemap-videos.xml"
		  /type "allow"
		  }

        }

      # The allowedClients section restricts the client IP addresses that are
      # allowed to issue activation requests.
      /allowedClients
        {
        # Uncomment the following to restrict activation requests to originate
        # from "localhost" only.
        #
        /0000
          {
          /glob "*.*.*.*"
          /type "deny"
          }
        /0001
          {
          /glob "<%= @aem_dispatch_proxy_to %>"
          /type "allow"
          }
        }

      # The ignoreUrlParams section contains query string parameter names that
      # should be ignored when determining whether some request's output can be
      # cached or delivered from cache.
      #
      # In this example configuration, the "q" parameter will be ignored.
      #/ignoreUrlParams
      #  {
      #  /0001 { /glob "*" /type "deny" }
      #  /0002 { /glob "q" /type "allow" }
      #  }

      # Cache response headers next to a cached file. On the first request to
      # an uncached resource, all headers matching one of the values found here
      # are stored in a separate file, next to the cache file. On subsequent
      # requests to the cached resource, the stored headers are added to the
      # response.
      #
      # Note, that file globbing characters are not allowed here.
      #
      #/headers
      #  {
      #  "Cache-Control"
      #  "Content-Disposition"
      #  "Content-Type"
      #  "Expires"
      #  "Last-Modified"
      #  "X-Content-Type-Options"
      #  }

      # A grace period defines the number of seconds a stale, auto-invalidated
      # resource may still be served from the cache after the last activation
      # occurring. Auto-invalidated resources are invalidated by any activation,
      # when their path matches the /invalidate section above. This setting
      # can be used in a setup, where a batch of activations would otherwise
      # repeatedly invalidate the entire cache.
      #
      #/gracePeriod "2"

      # Enable TTL evaluates the response headers from the backend, and if they
      # contain a Cache-Control max-age or Expires date, an auxiliary, empty file
      # next to the cache file is created, with modification time equal to the
      # expiry date. When the cache file is requested past the modification time
      # it is automatically re-requested from the backend.
      #
      # /enableTTL "1"

      }

    /vanity_urls {
        /url "/libs/granite/dispatcher/content/vanityUrls.html"
        /file "<%= @aem_path %>/dispatcher/cache/vanity_urls"
        /delay 300
    }

    # The statistics sections dictates how the load should be balanced among the
    # renders according to the media-type.
    /statistics
      {
      /categories
        {
        /html
          {
          /glob "*.html"
          }
        /others
          {
          /glob "*"
          }
        }
      }
    }

  }
